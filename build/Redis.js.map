{"version":3,"sources":["../src/Redis.js"],"names":["Redis","opts","key","value","expiryMode","time","JSON","stringify","snappy","compressSync","buffer","setBuffer","json","Promise","resolve","reject","getBuffer","uncompressSync","asBuffer","uncompress","parse","IORedis"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEMA,K;;;AACF,mBAAYC,IAAZ,EAAkB;AAAA;;AAAA,6GACRA,IADQ;AAEjB;;;;;gGAEkBC,G,EAAKC,K,EAAOC,U,EAAYC,I;;;;;;AACvC,oCAAI,QAAOF,KAAP,yCAAOA,KAAP,MAAgB,QAApB,EAA8B;AAC1BA,4CAAQG,KAAKC,SAAL,CAAeJ,KAAf,CAAR;AACH;;uCACkBK,iBAAOC,YAAP,CAAoBN,KAApB,C;;;AAAfO,sC;;sCACAN,cAAcC,I;;;;;iEACP,KAAKM,SAAL,CAAeT,GAAf,EAAoBQ,MAApB,EAA4BN,UAA5B,EAAwCC,IAAxC,C;;;iEACJ,KAAKM,SAAL,CAAeT,GAAf,EAAoBQ,MAApB,C;;;;;;;;;;;;;;;;;;oCAGER,G,EAA2B;AAAA;;AAAA,4FAAJ,EAAI;AAAA,mCAApBU,IAAoB;AAAA,gBAApBA,IAAoB,8BAAb,IAAa;;AACpC,mBAAO,IAAIC,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEQ,OAAKC,SAAL,CAAed,GAAf,CAFR;;AAAA;AAEPQ,0CAFO;;AAAA,yCAGPA,MAHO;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIgBF,iBAAOS,cAAP,CAAsBP,MAAtB,EAA8B,EAAEQ,UAAU,KAAZ,EAA9B,CAJhB;;AAAA;AAIHC,8CAJG;;;AAMP,wCAAIP,IAAJ,EAAU;AACNE,gDAAQR,KAAKc,KAAL,CAAWD,UAAX,CAAR;AACH,qCAFD,MAEO;AACHL,gDAAQK,UAAR;AACH;AAVM;AAAA;;AAAA;AAYPL,4CAAQ,IAAR;;AAZO;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAgBXC;;AAhBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAmBH;;;;EAnCeM,iB;;kBAsCLrB,K","file":"Redis.js","sourcesContent":["import IORedis from \"ioredis\";\nimport snappy from \"snappy\";\n\nclass Redis extends IORedis {\n    constructor(opts) {\n        super(opts);\n    }\n\n    async setCompress (key, value, expiryMode, time) {\n        if (typeof value == \"object\") {\n            value = JSON.stringify(value);\n        }\n        let buffer = await snappy.compressSync(value);\n        if (expiryMode && time)\n            return this.setBuffer(key, buffer, expiryMode, time);\n        return this.setBuffer(key, buffer);\n    }\n\n    getCompress (key, { json = true } = {}) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                let buffer = await this.getBuffer(key);\n                if (buffer) {\n                    let uncompress = await snappy.uncompressSync(buffer, { asBuffer: false });\n\n                    if (json) {\n                        resolve(JSON.parse(uncompress));\n                    } else {\n                        resolve(uncompress);\n                    }\n                } else {\n                    resolve(null)\n                }\n            }\n            catch (err) {\n                reject(err);\n            }\n        })\n    }\n}\n\nexport default Redis;"]}